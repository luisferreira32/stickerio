/*
Stickerio API

MMO RTS Stickerio game on an API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1UnitCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1UnitCount{}

// V1UnitCount struct for V1UnitCount
type V1UnitCount struct {
	StickmenCount int32 `json:"stickmenCount"`
	SwordsmenCount int32 `json:"swordsmenCount"`
}

type _V1UnitCount V1UnitCount

// NewV1UnitCount instantiates a new V1UnitCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UnitCount(stickmenCount int32, swordsmenCount int32) *V1UnitCount {
	this := V1UnitCount{}
	this.StickmenCount = stickmenCount
	this.SwordsmenCount = swordsmenCount
	return &this
}

// NewV1UnitCountWithDefaults instantiates a new V1UnitCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UnitCountWithDefaults() *V1UnitCount {
	this := V1UnitCount{}
	return &this
}

// GetStickmenCount returns the StickmenCount field value
func (o *V1UnitCount) GetStickmenCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StickmenCount
}

// GetStickmenCountOk returns a tuple with the StickmenCount field value
// and a boolean to check if the value has been set.
func (o *V1UnitCount) GetStickmenCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StickmenCount, true
}

// SetStickmenCount sets field value
func (o *V1UnitCount) SetStickmenCount(v int32) {
	o.StickmenCount = v
}

// GetSwordsmenCount returns the SwordsmenCount field value
func (o *V1UnitCount) GetSwordsmenCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SwordsmenCount
}

// GetSwordsmenCountOk returns a tuple with the SwordsmenCount field value
// and a boolean to check if the value has been set.
func (o *V1UnitCount) GetSwordsmenCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwordsmenCount, true
}

// SetSwordsmenCount sets field value
func (o *V1UnitCount) SetSwordsmenCount(v int32) {
	o.SwordsmenCount = v
}

func (o V1UnitCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1UnitCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stickmenCount"] = o.StickmenCount
	toSerialize["swordsmenCount"] = o.SwordsmenCount
	return toSerialize, nil
}

func (o *V1UnitCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stickmenCount",
		"swordsmenCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1UnitCount := _V1UnitCount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1UnitCount)

	if err != nil {
		return err
	}

	*o = V1UnitCount(varV1UnitCount)

	return err
}

type NullableV1UnitCount struct {
	value *V1UnitCount
	isSet bool
}

func (v NullableV1UnitCount) Get() *V1UnitCount {
	return v.value
}

func (v *NullableV1UnitCount) Set(val *V1UnitCount) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UnitCount) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UnitCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UnitCount(val *V1UnitCount) *NullableV1UnitCount {
	return &NullableV1UnitCount{value: val, isSet: true}
}

func (v NullableV1UnitCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UnitCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


