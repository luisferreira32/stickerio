/*
Stickerio API

MMO RTS Stickerio game on an API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1CityBuildings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CityBuildings{}

// V1CityBuildings struct for V1CityBuildings
type V1CityBuildings struct {
	BarracksLevel int32 `json:"barracksLevel"`
	MinesLevel int32 `json:"minesLevel"`
}

type _V1CityBuildings V1CityBuildings

// NewV1CityBuildings instantiates a new V1CityBuildings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CityBuildings(barracksLevel int32, minesLevel int32) *V1CityBuildings {
	this := V1CityBuildings{}
	this.BarracksLevel = barracksLevel
	this.MinesLevel = minesLevel
	return &this
}

// NewV1CityBuildingsWithDefaults instantiates a new V1CityBuildings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CityBuildingsWithDefaults() *V1CityBuildings {
	this := V1CityBuildings{}
	return &this
}

// GetBarracksLevel returns the BarracksLevel field value
func (o *V1CityBuildings) GetBarracksLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BarracksLevel
}

// GetBarracksLevelOk returns a tuple with the BarracksLevel field value
// and a boolean to check if the value has been set.
func (o *V1CityBuildings) GetBarracksLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BarracksLevel, true
}

// SetBarracksLevel sets field value
func (o *V1CityBuildings) SetBarracksLevel(v int32) {
	o.BarracksLevel = v
}

// GetMinesLevel returns the MinesLevel field value
func (o *V1CityBuildings) GetMinesLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinesLevel
}

// GetMinesLevelOk returns a tuple with the MinesLevel field value
// and a boolean to check if the value has been set.
func (o *V1CityBuildings) GetMinesLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinesLevel, true
}

// SetMinesLevel sets field value
func (o *V1CityBuildings) SetMinesLevel(v int32) {
	o.MinesLevel = v
}

func (o V1CityBuildings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CityBuildings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["barracksLevel"] = o.BarracksLevel
	toSerialize["minesLevel"] = o.MinesLevel
	return toSerialize, nil
}

func (o *V1CityBuildings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"barracksLevel",
		"minesLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1CityBuildings := _V1CityBuildings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1CityBuildings)

	if err != nil {
		return err
	}

	*o = V1CityBuildings(varV1CityBuildings)

	return err
}

type NullableV1CityBuildings struct {
	value *V1CityBuildings
	isSet bool
}

func (v NullableV1CityBuildings) Get() *V1CityBuildings {
	return v.value
}

func (v *NullableV1CityBuildings) Set(val *V1CityBuildings) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CityBuildings) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CityBuildings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CityBuildings(val *V1CityBuildings) *NullableV1CityBuildings {
	return &NullableV1CityBuildings{value: val, isSet: true}
}

func (v NullableV1CityBuildings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CityBuildings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


