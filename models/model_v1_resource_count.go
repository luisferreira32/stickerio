/*
Stickerio API

MMO RTS Stickerio game on an API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ResourceCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ResourceCount{}

// V1ResourceCount struct for V1ResourceCount
type V1ResourceCount struct {
	SticksCount int32 `json:"sticksCount"`
	CirclesCount int32 `json:"circlesCount"`
}

type _V1ResourceCount V1ResourceCount

// NewV1ResourceCount instantiates a new V1ResourceCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResourceCount(sticksCount int32, circlesCount int32) *V1ResourceCount {
	this := V1ResourceCount{}
	this.SticksCount = sticksCount
	this.CirclesCount = circlesCount
	return &this
}

// NewV1ResourceCountWithDefaults instantiates a new V1ResourceCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResourceCountWithDefaults() *V1ResourceCount {
	this := V1ResourceCount{}
	return &this
}

// GetSticksCount returns the SticksCount field value
func (o *V1ResourceCount) GetSticksCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SticksCount
}

// GetSticksCountOk returns a tuple with the SticksCount field value
// and a boolean to check if the value has been set.
func (o *V1ResourceCount) GetSticksCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SticksCount, true
}

// SetSticksCount sets field value
func (o *V1ResourceCount) SetSticksCount(v int32) {
	o.SticksCount = v
}

// GetCirclesCount returns the CirclesCount field value
func (o *V1ResourceCount) GetCirclesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CirclesCount
}

// GetCirclesCountOk returns a tuple with the CirclesCount field value
// and a boolean to check if the value has been set.
func (o *V1ResourceCount) GetCirclesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CirclesCount, true
}

// SetCirclesCount sets field value
func (o *V1ResourceCount) SetCirclesCount(v int32) {
	o.CirclesCount = v
}

func (o V1ResourceCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ResourceCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sticksCount"] = o.SticksCount
	toSerialize["circlesCount"] = o.CirclesCount
	return toSerialize, nil
}

func (o *V1ResourceCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sticksCount",
		"circlesCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ResourceCount := _V1ResourceCount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ResourceCount)

	if err != nil {
		return err
	}

	*o = V1ResourceCount(varV1ResourceCount)

	return err
}

type NullableV1ResourceCount struct {
	value *V1ResourceCount
	isSet bool
}

func (v NullableV1ResourceCount) Get() *V1ResourceCount {
	return v.value
}

func (v *NullableV1ResourceCount) Set(val *V1ResourceCount) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResourceCount) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResourceCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResourceCount(val *V1ResourceCount) *NullableV1ResourceCount {
	return &NullableV1ResourceCount{value: val, isSet: true}
}

func (v NullableV1ResourceCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResourceCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


