/*
Stickerio API

MMO RTS Stickerio game on an API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1CityResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CityResources{}

// V1CityResources struct for V1CityResources
type V1CityResources struct {
	Epoch int64 `json:"epoch"`
	BaseCount map[string]int64 `json:"baseCount"`
}

type _V1CityResources V1CityResources

// NewV1CityResources instantiates a new V1CityResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CityResources(epoch int64, baseCount map[string]int64) *V1CityResources {
	this := V1CityResources{}
	this.Epoch = epoch
	this.BaseCount = baseCount
	return &this
}

// NewV1CityResourcesWithDefaults instantiates a new V1CityResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CityResourcesWithDefaults() *V1CityResources {
	this := V1CityResources{}
	return &this
}

// GetEpoch returns the Epoch field value
func (o *V1CityResources) GetEpoch() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value
// and a boolean to check if the value has been set.
func (o *V1CityResources) GetEpochOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epoch, true
}

// SetEpoch sets field value
func (o *V1CityResources) SetEpoch(v int64) {
	o.Epoch = v
}

// GetBaseCount returns the BaseCount field value
func (o *V1CityResources) GetBaseCount() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.BaseCount
}

// GetBaseCountOk returns a tuple with the BaseCount field value
// and a boolean to check if the value has been set.
func (o *V1CityResources) GetBaseCountOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCount, true
}

// SetBaseCount sets field value
func (o *V1CityResources) SetBaseCount(v map[string]int64) {
	o.BaseCount = v
}

func (o V1CityResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CityResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["epoch"] = o.Epoch
	toSerialize["baseCount"] = o.BaseCount
	return toSerialize, nil
}

func (o *V1CityResources) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"epoch",
		"baseCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1CityResources := _V1CityResources{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1CityResources)

	if err != nil {
		return err
	}

	*o = V1CityResources(varV1CityResources)

	return err
}

type NullableV1CityResources struct {
	value *V1CityResources
	isSet bool
}

func (v NullableV1CityResources) Get() *V1CityResources {
	return v.value
}

func (v *NullableV1CityResources) Set(val *V1CityResources) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CityResources) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CityResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CityResources(val *V1CityResources) *NullableV1CityResources {
	return &NullableV1CityResources{value: val, isSet: true}
}

func (v NullableV1CityResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CityResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


