/*
Stickerio API

MMO RTS Stickerio game on an API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1CityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CityInfo{}

// V1CityInfo struct for V1CityInfo
type V1CityInfo struct {
	Id string `json:"id"`
	Name string `json:"name"`
	PlayerID string `json:"playerID"`
	LocationX int32 `json:"locationX"`
	LocationY int32 `json:"locationY"`
}

type _V1CityInfo V1CityInfo

// NewV1CityInfo instantiates a new V1CityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CityInfo(id string, name string, playerID string, locationX int32, locationY int32) *V1CityInfo {
	this := V1CityInfo{}
	this.Id = id
	this.Name = name
	this.PlayerID = playerID
	this.LocationX = locationX
	this.LocationY = locationY
	return &this
}

// NewV1CityInfoWithDefaults instantiates a new V1CityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CityInfoWithDefaults() *V1CityInfo {
	this := V1CityInfo{}
	return &this
}

// GetId returns the Id field value
func (o *V1CityInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V1CityInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V1CityInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *V1CityInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1CityInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1CityInfo) SetName(v string) {
	o.Name = v
}

// GetPlayerID returns the PlayerID field value
func (o *V1CityInfo) GetPlayerID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayerID
}

// GetPlayerIDOk returns a tuple with the PlayerID field value
// and a boolean to check if the value has been set.
func (o *V1CityInfo) GetPlayerIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerID, true
}

// SetPlayerID sets field value
func (o *V1CityInfo) SetPlayerID(v string) {
	o.PlayerID = v
}

// GetLocationX returns the LocationX field value
func (o *V1CityInfo) GetLocationX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocationX
}

// GetLocationXOk returns a tuple with the LocationX field value
// and a boolean to check if the value has been set.
func (o *V1CityInfo) GetLocationXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationX, true
}

// SetLocationX sets field value
func (o *V1CityInfo) SetLocationX(v int32) {
	o.LocationX = v
}

// GetLocationY returns the LocationY field value
func (o *V1CityInfo) GetLocationY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocationY
}

// GetLocationYOk returns a tuple with the LocationY field value
// and a boolean to check if the value has been set.
func (o *V1CityInfo) GetLocationYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationY, true
}

// SetLocationY sets field value
func (o *V1CityInfo) SetLocationY(v int32) {
	o.LocationY = v
}

func (o V1CityInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["playerID"] = o.PlayerID
	toSerialize["locationX"] = o.LocationX
	toSerialize["locationY"] = o.LocationY
	return toSerialize, nil
}

func (o *V1CityInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"playerID",
		"locationX",
		"locationY",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1CityInfo := _V1CityInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1CityInfo)

	if err != nil {
		return err
	}

	*o = V1CityInfo(varV1CityInfo)

	return err
}

type NullableV1CityInfo struct {
	value *V1CityInfo
	isSet bool
}

func (v NullableV1CityInfo) Get() *V1CityInfo {
	return v.value
}

func (v *NullableV1CityInfo) Set(val *V1CityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CityInfo(val *V1CityInfo) *NullableV1CityInfo {
	return &NullableV1CityInfo{value: val, isSet: true}
}

func (v NullableV1CityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


